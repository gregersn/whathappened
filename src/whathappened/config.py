"""App default config."""

import os
from pathlib import Path
from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    """Settings to be overridden with env variables."""

    ADMINS: list[str] = ["your-email@example.com"]
    ASSETS_DEBUG: bool = False
    ASSETS_AUTO_BUILD: bool = False
    FLASK_DEBUG: bool = True
    MAIL_PORT: int = 8025
    MAIL_SERVER: str = "localhost"
    MAX_CONTENT_LENGTH: int = 1024 * 1024  # Max upload size
    REQUIRE_INVITE: bool = True  # Set to true to require invitation to register
    SECRET_KEY: str = "development"
    SQLALCHEMY_DATABASE_URI: str | None = (
        os.environ.get("DATABASE_URL")
        or f"sqlite:///{Path(__file__).parent.parent.parent.parent / 'whathappened.sqlite'}"
    )

    SQLALCHEMY_TRACK_MODIFICATIONS: bool = False
    UPLOAD_EXTENSIONS: list[str] = [".jpg", ".png", ".jpeg", ".gif"]
    UPLOAD_FOLDER: str = "uploads"
    WEBPACKEXT_MANIFEST_PATH: str = "manifest.json"
    WTF_CSRF_TIME_LIMIT: int | None = None

    model_config = SettingsConfigDict(env_file_encoding="utf-8")

    ETHERPAD_INSTANCE: Optional[str] = (
        "http://localhost:9001"  # Enable etherpad by giving a URL to the instance.
    )
    ETHERPAD_API_KEY: Optional[str | Path] = Path(
        "/Users/greger/APIKEY.txt"
    )  # Either the API KEY as a string, or path to a file containing the key (as generated by Etherpad.)

    ETHERPAD_ENDPOINT: Optional[str] = "http://localhost:9001"


Config = Settings(_env_file=os.environ.get("WHATHAPPENED_SETTINGS"))

if __name__ == "__main__":  # pragma: no cover
    print(Config)
